// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WebsiteDirectory.Domain;

namespace WebsiteDirectory.Migrations
{
    [DbContext(typeof(WebsiteContext))]
    partial class WebsiteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebsiteDirectory.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("WebsiteDirectory.Domain.Database", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Databases");
                });

            modelBuilder.Entity("WebsiteDirectory.Domain.Mode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Modes");
                });

            modelBuilder.Entity("WebsiteDirectory.Domain.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("WebsiteDirectory.Domain.Purpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Purposes");
                });

            modelBuilder.Entity("WebsiteDirectory.Domain.Website", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("WebsiteDirectory.Domain.WebsiteUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("DatabaseId");

                    b.Property<int?>("ModeId");

                    b.Property<string>("Name");

                    b.Property<int?>("PurposeId");

                    b.Property<string>("Url");

                    b.Property<int?>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DatabaseId");

                    b.HasIndex("ModeId");

                    b.HasIndex("PurposeId");

                    b.HasIndex("WebsiteId");

                    b.ToTable("WebsiteUrls");
                });

            modelBuilder.Entity("WebsiteDirectory.Domain.Company", b =>
                {
                    b.HasOne("WebsiteDirectory.Domain.Profile")
                        .WithMany("Companies")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("WebsiteDirectory.Domain.Database", b =>
                {
                    b.HasOne("WebsiteDirectory.Domain.Profile")
                        .WithMany("Databases")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("WebsiteDirectory.Domain.Mode", b =>
                {
                    b.HasOne("WebsiteDirectory.Domain.Profile")
                        .WithMany("Modes")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("WebsiteDirectory.Domain.Purpose", b =>
                {
                    b.HasOne("WebsiteDirectory.Domain.Profile")
                        .WithMany("Purposes")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("WebsiteDirectory.Domain.Website", b =>
                {
                    b.HasOne("WebsiteDirectory.Domain.Profile")
                        .WithMany("Websites")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("WebsiteDirectory.Domain.WebsiteUrl", b =>
                {
                    b.HasOne("WebsiteDirectory.Domain.Company", "Company")
                        .WithMany("Websites")
                        .HasForeignKey("CompanyId");

                    b.HasOne("WebsiteDirectory.Domain.Database", "Database")
                        .WithMany("Websites")
                        .HasForeignKey("DatabaseId");

                    b.HasOne("WebsiteDirectory.Domain.Mode", "Mode")
                        .WithMany("Websites")
                        .HasForeignKey("ModeId");

                    b.HasOne("WebsiteDirectory.Domain.Purpose", "Purpose")
                        .WithMany("Websites")
                        .HasForeignKey("PurposeId");

                    b.HasOne("WebsiteDirectory.Domain.Website", "Website")
                        .WithMany("Websites")
                        .HasForeignKey("WebsiteId");
                });
#pragma warning restore 612, 618
        }
    }
}
